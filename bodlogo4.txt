def create_stone_piles(n):
    if n <= 0:
        return []
      piles = []
    current_stones = n
    for i in range(n):
        piles.append(current_stones)
        current_stones += 2 
    return piles

def analyze_piles(piles, n):
    print(f"Input: {n}")
    print(f"Output: {piles}")
    print(f"Number of piles: {len(piles)}")
    
    if not piles:
        print("No piles created")
        return
    
    print(f"First pile stones: {piles[0]}")
    print(f"Parity (even/odd): {'even' if n % 2 == 0 else 'odd'}")
    all_same_parity = all(stone % 2 == n % 2 for stone in piles)
    print(f"All piles have same parity: {all_same_parity}")

    increasing = all(piles[i] < piles[i+1] for i in range(len(piles)-1))
    print(f"Piles are increasing: {increasing}")
    
    if len(piles) > 1:
        increments = [piles[i+1] - piles[i] for i in range(len(piles)-1)]
        print(f"Increments between piles: {increments}")
        all_increment_by_2 = all(inc == 2 for inc in increments)
        print(f"All increments are 2: {all_increment_by_2}")
    
    print("-" * 50)
def test_function():
    test_cases = [
        (2, [2, 4]),
        (10, [10, 12, 14, 16, 18, 20, 22, 24, 26, 28]),
        (3, [3, 5, 7]),
        (17, [17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49])
    ]
    
    print("Testing Stone Piles Distribution:")
    print("=" * 50)
    
    for i, (input_n, expected) in enumerate(test_cases, 1):
        result = create_stone_piles(input_n)
        status = "✓" if result == expected else "✗"
        
        print(f"Test {i}: {status}")
        analyze_piles(result, input_n)
        
        if result != expected:
            print(f"Expected: {expected}")
            print(f"Got: {result}")
            print("-" * 50)


def mathematical_formula(n):
    return [n + 2*i for i in range(n)]
def test_edge_cases():
    print("Testing Edge Cases:")
    print("=" * 50)
    
    edge_cases = [0, 1, 5]
    
    for case in edge_cases:
        result = create_stone_piles(case)
        print(f"Input: {case}")
        print(f"Output: {result}")
    
        formula_result = mathematical_formula(case)
        matches_formula = result == formula_result
        print(f"Matches formula: {matches_formula}")
        print("-" * 30)

if __name__ == "__main__":
    test_function()
    test_edge_cases()
    
    print("\nInteractive Example:")
    print("=" * 50)
    example_n = 7
    result = create_stone_piles(example_n)
    analyze_piles(result, example_n)
    print("Pattern explanation:")
    print("For n piles starting with n stones:")
    print("Pile 1: n stones")
    print("Pile 2: n + 2 stones") 
    print("Pile 3: n + 4 stones")
    print("...")
    print(f"Pile i: n + 2*(i-1) stones")
  print(f"Last pile: n + 2*(n-1) = {example_n} + 2*({example_n}-1) = {example_n + 2*(example_n-1)} stones")
